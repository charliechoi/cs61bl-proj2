import java.util.*;
import junit.framework.TestCase;
public class ProofTest extends TestCase {
	boolean succeededErrorHandling = false;
    public void testGeneral() {
        boolean succeededErrorHandling = false;
        Proof soFar = new Proof(new TheoremSet());
        assertEquals(soFar.nextLineNumber(), "1");
        try {
			soFar.extendProof("show (~~p=>p)");
		} catch (IllegalLineException e1) {

			e1.printStackTrace();
		} catch (IllegalInferenceException e1) {

			e1.printStackTrace();
		}
        assertTrue(soFar.isOK());
        assertFalse(soFar.isComplete());
        assertEquals(soFar.nextLineNumber(), "2");
        
        try {
            soFar.extendProof("assume (~~p)"); // invalid, shouldn't have paren
        } catch (IllegalLineException e) {
            succeededErrorHandling = true;
        } catch (IllegalInferenceException e) {
        	succeededErrorHandling = true;
			e.printStackTrace();
		}
        assertTrue(succeededErrorHandling);
        succeededErrorHandling = false; // reset

        try {
            soFar.extendProof("assume ~~p)"); // invalid
        } catch (IllegalLineException e) {
            succeededErrorHandling = true;
        } catch (IllegalInferenceException e) {

			e.printStackTrace();
		}
        assertTrue(succeededErrorHandling);
        succeededErrorHandling = false;

        try {
            soFar.extendProof("assume ~(~p)"); // invalid
        } catch (IllegalLineException e) {
            succeededErrorHandling = true;
        } catch (IllegalInferenceException e) {

			e.printStackTrace();
		}
        assertTrue(succeededErrorHandling);
        succeededErrorHandling = false;
        
      
        try {
            soFar.extendProof("assum ~~p"); // invalid
        } catch (IllegalLineException e) {
            succeededErrorHandling = true;
        } catch (IllegalInferenceException e) {
        	 succeededErrorHandling = true;
		}
        assertTrue(succeededErrorHandling);
        succeededErrorHandling = false;

        try {
            soFar.extendProof("assume"); // invalid
        } catch (IllegalLineException e) {
            succeededErrorHandling = true;
        } catch (IllegalInferenceException e) {

			e.printStackTrace();
		}
        assertTrue(succeededErrorHandling);
        succeededErrorHandling = false;

        try {
            soFar.extendProof("assume ~"); // invalid
        } catch (IllegalLineException e) {
            succeededErrorHandling = true;
        } catch (IllegalInferenceException e) {

			e.printStackTrace();
		}
        assertTrue(succeededErrorHandling);
        succeededErrorHandling = false;

        try {
            soFar.extendProof("assume ~~p."); // invalid
        } catch (IllegalLineException e) {
            succeededErrorHandling = true;
        } catch (IllegalInferenceException e) {

			e.printStackTrace();
		}
        assertTrue(succeededErrorHandling);
        succeededErrorHandling = false;

        try {
            soFar.extendProof("assume ~~p ~~p"); // invalid
        } catch (IllegalLineException e) {
            succeededErrorHandling = true;
        } catch (IllegalInferenceException e) {

			e.printStackTrace();
		}
        assertTrue(succeededErrorHandling);
        succeededErrorHandling = false;

        
       
        assertFalse(soFar.isComplete());
        assertEquals(soFar.nextLineNumber(), "2");
        
        try {
			soFar.extendProof("assume ~~p");
		} catch (IllegalLineException e1) {

			e1.printStackTrace();
		} catch (IllegalInferenceException e1) {

			e1.printStackTrace();
		}
        assertTrue(soFar.isOK());
        assertFalse(soFar.isComplete());

        try {
            try {
				soFar.extendProof("assume ~~p");
			} catch (IllegalLineException e) {

				e.printStackTrace();
			} // invalid, assume must follow show
        } catch (IllegalInferenceException e) {
            succeededErrorHandling = true;
        }
      
        succeededErrorHandling = false;
        
    
        try {
			soFar.extendProof("show p");
		} catch (IllegalLineException e1) {

			e1.printStackTrace();
		} catch (IllegalInferenceException e1) {

			e1.printStackTrace();
		}
        assertTrue(soFar.isOK());
        assertFalse(soFar.isComplete());
              try {
			soFar.extendProof("assume ~p");
		} catch (IllegalLineException e1) {

			e1.printStackTrace();
		} catch (IllegalInferenceException e1) {

			e1.printStackTrace();
		}
        assertTrue(soFar.isOK());
        assertFalse(soFar.isComplete());


        try {
            soFar.extendProof("co 3.1 p"); // invalid
        } catch (IllegalLineException e) {
            succeededErrorHandling = true;
        } catch (IllegalInferenceException e) {

			e.printStackTrace();
		}
        assertTrue(succeededErrorHandling);
        succeededErrorHandling = false;

        try {
            soFar.extendProof("co p"); // invalid
        } catch (IllegalLineException e) {
            succeededErrorHandling = true;
        } catch (IllegalInferenceException e) {

			e.printStackTrace();
		}
        assertTrue(succeededErrorHandling);
        succeededErrorHandling = false;

        try {
            soFar.extendProof("co 3.1 2 p ."); // invalid
        } catch (IllegalLineException e) {
            succeededErrorHandling = true;
        } catch (IllegalInferenceException e) {

			e.printStackTrace();
		}
        assertTrue(succeededErrorHandling);
        succeededErrorHandling = false;

       
       
       
       
        try {
            soFar.extendProof("ic 3 p"); // invalid
        } catch (IllegalInferenceException e) {
            succeededErrorHandling = true;
        } catch (IllegalLineException e) {

			e.printStackTrace();
		}
        assertTrue(succeededErrorHandling);
        succeededErrorHandling = false;

        try {
            soFar.extendProof("ic 3.1 p"); // invalid
        } catch (IllegalInferenceException e) {
            succeededErrorHandling = true;
        } catch (IllegalLineException e) {

			e.printStackTrace();
		}
     

        try {
			soFar.extendProof("co 2 3.1 p");
		} catch (IllegalLineException e1) {

			e1.printStackTrace();
		} catch (IllegalInferenceException e1) {

			e1.printStackTrace();
		}
      
 

        try {
            soFar.extendProof("ic (~~p=>p)"); // invalid
        } catch (IllegalLineException e) {
            succeededErrorHandling = true;
        } catch (IllegalInferenceException e) {

			e.printStackTrace();
		}
        

        try {
            soFar.extendProof("ic 3 ~~p=>p"); // invalid
        } catch (IllegalLineException e) {
            succeededErrorHandling = true;
        } catch (IllegalInferenceException e) {

			e.printStackTrace();
		}
        
        try {
			soFar.extendProof("ic 3 (~~p=>p)");
		} catch (IllegalLineException e) {

			e.printStackTrace();
		} catch (IllegalInferenceException e) {

			e.printStackTrace();
		}
    
   
        
        
        /** 1	show (~~p=>p)
            2	assume ~~p
            3	show p
            3.1	assume ~p
            3.2	co 2 3.1 p
            4	ic 3 (~~p=>p)
        */
    }
    
	public void testTheorems() {
        boolean succeededErrorHandling = false;
        try{
        TheoremSet ts = new TheoremSet();
        Expression buildAnd=new Expression("(a=>(b=>(a&b)))");
        ts.put("buildAnd", buildAnd );
        Expression demorgan2=new Expression( "((~a&~b)=>~(a|b))");
        ts.put("demorgan2", demorgan2);
        Proof soFar = new Proof(ts);
        try {
        	soFar.extendProof("show ((p|q)=>(~p=>q))");
        } catch (IllegalLineException e) {
            succeededErrorHandling = true;
        } catch (IllegalInferenceException e) {
        	 succeededErrorHandling = true;
		}
        assertTrue(soFar.isOK());
        assertFalse(soFar.isComplete());
        
        try {
        	soFar.extendProof("assume (p|q");
        } catch (IllegalLineException e) {
            succeededErrorHandling = true;
        } catch (IllegalInferenceException e) {
        	 succeededErrorHandling = true;
		}
        
        assertTrue(soFar.isOK());
        assertFalse(soFar.isComplete());
        try {
        	soFar.extendProof("show (~p=>q");
        } catch (IllegalLineException e) {
            succeededErrorHandling = true;
        } catch (IllegalInferenceException e) {
        	 succeededErrorHandling = true;
		}
        
        assertTrue(soFar.isOK());
        assertFalse(soFar.isComplete());
        try {
        	soFar.extendProof("assume ~p");
        } catch (IllegalLineException e) {
            succeededErrorHandling = true;
        } catch (IllegalInferenceException e) {
        	 succeededErrorHandling = true;
		}
        
        assertTrue(soFar.isOK());
        assertFalse(soFar.isComplete());
        try {
        	soFar.extendProof("show q");
        } catch (IllegalLineException e) {
            succeededErrorHandling = true;
        } catch (IllegalInferenceException e) {
        	 succeededErrorHandling = true;
		}
        
        assertTrue(soFar.isOK());
        assertFalse(soFar.isComplete());
        try {
        	soFar.extendProof("assume ~q");
        } catch (IllegalLineException e) {
            succeededErrorHandling = true;
        } catch (IllegalInferenceException e) {
        	 succeededErrorHandling = true;
		}
        
        assertTrue(soFar.isOK());
        assertFalse(soFar.isComplete());
        try {
        	soFar.extendProof("buildAnd (~p=>(~q=>(~p&~q)))");
        } catch (IllegalLineException e) {
            succeededErrorHandling = true;
        } catch (IllegalInferenceException e) {
        	 succeededErrorHandling = true;
		}
        
        assertTrue(soFar.isOK());
        assertFalse(soFar.isComplete());
        assertEquals(soFar.nextLineNumber(), "3.3");
        try {
        	soFar.extendProof("mp 3.1 3.2 (~q=>(~p&~q))");
        } catch (IllegalLineException e) {
            succeededErrorHandling = true;
        } catch (IllegalInferenceException e) {
        	 succeededErrorHandling = true;
		}
        
        assertFalse(soFar.isComplete());
        try {
        	soFar.extendProof("mp 3.2.3 3.2.1 (~p&~q)");
        } catch (IllegalLineException e) {
            succeededErrorHandling = true;
        } catch (IllegalInferenceException e) {
        	 succeededErrorHandling = true;
		}
        
        assertFalse(soFar.isComplete());
        
        try {
            soFar.extendProof("demorgan2 ((~p|q)=>~(p|q))"); // invalid
        } catch (IllegalInferenceException e) {
            succeededErrorHandling = true;
        } catch (IllegalLineException e) {
       	 succeededErrorHandling = true;
		}
        assertTrue(succeededErrorHandling);
        succeededErrorHandling = false;
        
       
        assertFalse(soFar.isComplete());
        try {
        	soFar.extendProof("mp 3.2.4 3.2.5 ~(p|q)");
        } catch (IllegalInferenceException e) {
            succeededErrorHandling = true;
        } catch (IllegalLineException e) {
         	 succeededErrorHandling = true;
  		}
        
        assertFalse(soFar.isComplete());
        try {
        	soFar.extendProof("co 3.2.6 2 q");
        } catch (IllegalInferenceException e) {
            succeededErrorHandling = true;
        } catch (IllegalLineException e) {
         	 succeededErrorHandling = true;
  		}
        
        assertFalse(soFar.isComplete());
        
       
        try {
        	soFar.extendProof("ic 3.2 (~p=>q)"); 
        } catch (IllegalInferenceException e) {
            succeededErrorHandling = true;
        } catch (IllegalLineException e) {
         	 succeededErrorHandling = true;
  		}
        
        assertFalse(soFar.isComplete());
        try {
        	soFar.extendProof("ic 3 ((p|q)=>(~p=>q))"); 
        } catch (IllegalInferenceException e) {
            succeededErrorHandling = true;
        } catch (IllegalLineException e) {
         	 succeededErrorHandling = true;
  		}
       
        }catch (IllegalLineException e ){
        	assertTrue(false);
        }
        
        
        /** This next proof uses two theorems: 
            buildAnd (a=>(b=>(a&b)))
            demorgan2 ((~a&~b)=>~(a|b))

            1	show ((p|q)=>(~p=>q))
            2	assume (p|q)
            3	show (~p=>q)
            3.1	assume ~p
            3.2	show q
            3.2.1	assume ~q
            3.2.2	buildAnd (~p=>(~q=>(~p&~q)))
            3.2.3	mp 3.1 3.2.2 (~q=>(~p&~q))
            3.2.4	mp 3.2.3 3.2.1 (~p&~q)
            3.2.5	demorgan2 ((~p&~q)=>~(p|q))
            3.2.6	mp 3.2.4 3.2.5 ~(p|q)
            3.2.7	co 3.2.6 2 q
            3.3	ic 3.2 (~p=>q)
            4	ic 3 ((p|q)=>(~p=>q))
        */
    }

    
    
    public void testToString() {
        TheoremSet ts = new TheoremSet();
        try{
        	Expression a = new Expression("(a=>a)");
        
        ts.put("identity", a);
        Proof soFar = new Proof(ts);
        try {
			soFar.extendProof("show (~~p=>p)");
		} catch (IllegalLineException e) {

			e.printStackTrace();
		} catch (IllegalInferenceException e) {

			e.printStackTrace();
		}
        try {
			soFar.extendProof("assume ~p");
		} catch (IllegalLineException e) {

			e.printStackTrace();
		} catch (IllegalInferenceException e) {

			e.printStackTrace();
		} // ignored invalid input
        try {
			soFar.extendProof("assume x");
		} catch (IllegalLineException e) {

			e.printStackTrace();
		} catch (IllegalInferenceException e) {

			e.printStackTrace();
		}  // ignored invalid input
       
        String testString = "1\tshow (~~p=>p)\n2\tassume ~p\n3\tassume x";
        System.out.println(testString);
        System.out.println(soFar.toString());
        
        /** INPUT:
            1  show (~~p=>p)
            2  assume ~p
            invalid assumption
            2  assume x
            invalid assumption
            2  assume ~~p
            3  show p
            3.1  assume ~p
            3.2  identit (p=>p)
            bad theorem name
            3.2  identity (p=>p)
            

           
        */
        }catch (IllegalLineException e){
        	assertTrue(false);
    }
        
    }
}

